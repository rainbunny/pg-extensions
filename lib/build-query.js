"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildQuery = void 0;

const buildMainQuery = ({
  table,
  whereClause,
  fields
}) => {
  const fieldsClause = fields ? fields.map(field => `${field} as "${field}"`).join(',') : '';
  return `SELECT ${fieldsClause || '*'} FROM ${table}${whereClause ? ` WHERE ${whereClause}` : ''}`;
};

const buildSortBy = ({
  sortBy
}) => sortBy && sortBy.length > 0 ? ` ORDER BY ${sortBy.map(m => m.replace('|', ' ')).join(', ')}` : '';
/** build postgres sql query & params */


const buildQuery = query => {
  const {
    pageIndex,
    rowsPerPage,
    params
  } = query;
  let {
    limit,
    offset
  } = query;
  let finalQueryText;
  let paramInx = 1;
  const paramsArr = [];

  if (query.queryText) {
    finalQueryText = query.queryText;
  } else {
    finalQueryText = buildMainQuery(query) + buildSortBy(query); // add limit/offset

    if (typeof pageIndex === 'number' && typeof rowsPerPage === 'number') {
      limit = rowsPerPage;
      offset = rowsPerPage * pageIndex;
    }

    if (typeof limit === 'number') {
      finalQueryText += ` LIMIT $${paramInx}`;
      paramsArr.push(limit);
      paramInx += 1;
    }

    if (typeof offset === 'number') {
      finalQueryText += ` OFFSET $${paramInx}`;
      paramsArr.push(offset);
      paramInx += 1;
    }
  } // assign params


  if (params) {
    Object.keys(params).forEach(paramName => {
      const splitQueryArr = finalQueryText.split(`:${paramName}`);

      if (splitQueryArr.length > 1) {
        let newQuery = splitQueryArr[0];
        splitQueryArr.forEach((part, index) => {
          if (index > 0) {
            newQuery += `$${paramInx}${part}`;
            paramsArr.push(params[paramName]);
            paramInx += 1;
          }
        });
        finalQueryText = newQuery;
      }
    });
  }

  return {
    queryText: finalQueryText,
    params: paramsArr
  };
};

exports.buildQuery = buildQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idWlsZC1xdWVyeS50cyJdLCJuYW1lcyI6WyJidWlsZE1haW5RdWVyeSIsInRhYmxlIiwid2hlcmVDbGF1c2UiLCJmaWVsZHMiLCJmaWVsZHNDbGF1c2UiLCJtYXAiLCJmaWVsZCIsImpvaW4iLCJidWlsZFNvcnRCeSIsInNvcnRCeSIsImxlbmd0aCIsIm0iLCJyZXBsYWNlIiwiYnVpbGRRdWVyeSIsInF1ZXJ5IiwicGFnZUluZGV4Iiwicm93c1BlclBhZ2UiLCJwYXJhbXMiLCJsaW1pdCIsIm9mZnNldCIsImZpbmFsUXVlcnlUZXh0IiwicGFyYW1JbngiLCJwYXJhbXNBcnIiLCJxdWVyeVRleHQiLCJwdXNoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwYXJhbU5hbWUiLCJzcGxpdFF1ZXJ5QXJyIiwic3BsaXQiLCJuZXdRdWVyeSIsInBhcnQiLCJpbmRleCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLE1BQU1BLGNBQWMsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLEtBQUQ7QUFBUUMsRUFBQUEsV0FBUjtBQUFxQkMsRUFBQUE7QUFBckIsQ0FBRCxLQUFtRDtBQUN4RSxRQUFNQyxZQUFZLEdBQUdELE1BQU0sR0FBR0EsTUFBTSxDQUFDRSxHQUFQLENBQVlDLEtBQUQsSUFBWSxHQUFFQSxLQUFNLFFBQU9BLEtBQU0sR0FBNUMsRUFBZ0RDLElBQWhELENBQXFELEdBQXJELENBQUgsR0FBK0QsRUFBMUY7QUFDQSxTQUFRLFVBQVNILFlBQVksSUFBSSxHQUFJLFNBQVFILEtBQU0sR0FBRUMsV0FBVyxHQUFJLFVBQVNBLFdBQVksRUFBekIsR0FBNkIsRUFBRyxFQUFoRztBQUNELENBSEQ7O0FBS0EsTUFBTU0sV0FBVyxHQUFHLENBQUM7QUFBQ0MsRUFBQUE7QUFBRCxDQUFELEtBQ2xCQSxNQUFNLElBQUlBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQixDQUExQixHQUErQixhQUFZRCxNQUFNLENBQUNKLEdBQVAsQ0FBWU0sQ0FBRCxJQUFPQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxHQUFWLEVBQWUsR0FBZixDQUFsQixFQUF1Q0wsSUFBdkMsQ0FBNEMsSUFBNUMsQ0FBa0QsRUFBN0YsR0FBaUcsRUFEbkc7QUFHQTs7O0FBQ08sTUFBTU0sVUFBVSxHQUFJQyxLQUFELElBQTZEO0FBQ3JGLFFBQU07QUFBQ0MsSUFBQUEsU0FBRDtBQUFZQyxJQUFBQSxXQUFaO0FBQXlCQyxJQUFBQTtBQUF6QixNQUFtQ0gsS0FBekM7QUFDQSxNQUFJO0FBQUNJLElBQUFBLEtBQUQ7QUFBUUMsSUFBQUE7QUFBUixNQUFrQkwsS0FBdEI7QUFDQSxNQUFJTSxjQUFKO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLENBQWY7QUFDQSxRQUFNQyxTQUFTLEdBQUcsRUFBbEI7O0FBRUEsTUFBSVIsS0FBSyxDQUFDUyxTQUFWLEVBQXFCO0FBQ25CSCxJQUFBQSxjQUFjLEdBQUdOLEtBQUssQ0FBQ1MsU0FBdkI7QUFDRCxHQUZELE1BRU87QUFDTEgsSUFBQUEsY0FBYyxHQUFHcEIsY0FBYyxDQUFDYyxLQUFELENBQWQsR0FBd0JOLFdBQVcsQ0FBQ00sS0FBRCxDQUFwRCxDQURLLENBRUw7O0FBQ0EsUUFBSSxPQUFPQyxTQUFQLEtBQXFCLFFBQXJCLElBQWlDLE9BQU9DLFdBQVAsS0FBdUIsUUFBNUQsRUFBc0U7QUFDcEVFLE1BQUFBLEtBQUssR0FBR0YsV0FBUjtBQUNBRyxNQUFBQSxNQUFNLEdBQUdILFdBQVcsR0FBR0QsU0FBdkI7QUFDRDs7QUFDRCxRQUFJLE9BQU9HLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JFLE1BQUFBLGNBQWMsSUFBSyxXQUFVQyxRQUFTLEVBQXRDO0FBQ0FDLE1BQUFBLFNBQVMsQ0FBQ0UsSUFBVixDQUFlTixLQUFmO0FBQ0FHLE1BQUFBLFFBQVEsSUFBSSxDQUFaO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPRixNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCQyxNQUFBQSxjQUFjLElBQUssWUFBV0MsUUFBUyxFQUF2QztBQUNBQyxNQUFBQSxTQUFTLENBQUNFLElBQVYsQ0FBZUwsTUFBZjtBQUNBRSxNQUFBQSxRQUFRLElBQUksQ0FBWjtBQUNEO0FBQ0YsR0ExQm9GLENBNEJyRjs7O0FBQ0EsTUFBSUosTUFBSixFQUFZO0FBQ1ZRLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxNQUFaLEVBQW9CVSxPQUFwQixDQUE2QkMsU0FBRCxJQUFlO0FBQ3pDLFlBQU1DLGFBQWEsR0FBR1QsY0FBYyxDQUFDVSxLQUFmLENBQXNCLElBQUdGLFNBQVUsRUFBbkMsQ0FBdEI7O0FBQ0EsVUFBSUMsYUFBYSxDQUFDbkIsTUFBZCxHQUF1QixDQUEzQixFQUE4QjtBQUM1QixZQUFJcUIsUUFBUSxHQUFHRixhQUFhLENBQUMsQ0FBRCxDQUE1QjtBQUNBQSxRQUFBQSxhQUFhLENBQUNGLE9BQWQsQ0FBc0IsQ0FBQ0ssSUFBRCxFQUFPQyxLQUFQLEtBQWlCO0FBQ3JDLGNBQUlBLEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDYkYsWUFBQUEsUUFBUSxJQUFLLElBQUdWLFFBQVMsR0FBRVcsSUFBSyxFQUFoQztBQUNBVixZQUFBQSxTQUFTLENBQUNFLElBQVYsQ0FBZVAsTUFBTSxDQUFDVyxTQUFELENBQXJCO0FBQ0FQLFlBQUFBLFFBQVEsSUFBSSxDQUFaO0FBQ0Q7QUFDRixTQU5EO0FBT0FELFFBQUFBLGNBQWMsR0FBR1csUUFBakI7QUFDRDtBQUNGLEtBYkQ7QUFjRDs7QUFFRCxTQUFPO0FBQ0xSLElBQUFBLFNBQVMsRUFBRUgsY0FETjtBQUVMSCxJQUFBQSxNQUFNLEVBQUVLO0FBRkgsR0FBUDtBQUlELENBbERNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge0RiUXVlcnl9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmNvbnN0IGJ1aWxkTWFpblF1ZXJ5ID0gKHt0YWJsZSwgd2hlcmVDbGF1c2UsIGZpZWxkc306IERiUXVlcnkpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBmaWVsZHNDbGF1c2UgPSBmaWVsZHMgPyBmaWVsZHMubWFwKChmaWVsZCkgPT4gYCR7ZmllbGR9IGFzIFwiJHtmaWVsZH1cImApLmpvaW4oJywnKSA6ICcnO1xuICByZXR1cm4gYFNFTEVDVCAke2ZpZWxkc0NsYXVzZSB8fCAnKid9IEZST00gJHt0YWJsZX0ke3doZXJlQ2xhdXNlID8gYCBXSEVSRSAke3doZXJlQ2xhdXNlfWAgOiAnJ31gO1xufTtcblxuY29uc3QgYnVpbGRTb3J0QnkgPSAoe3NvcnRCeX06IERiUXVlcnkpOiBzdHJpbmcgPT5cbiAgc29ydEJ5ICYmIHNvcnRCeS5sZW5ndGggPiAwID8gYCBPUkRFUiBCWSAke3NvcnRCeS5tYXAoKG0pID0+IG0ucmVwbGFjZSgnfCcsICcgJykpLmpvaW4oJywgJyl9YCA6ICcnO1xuXG4vKiogYnVpbGQgcG9zdGdyZXMgc3FsIHF1ZXJ5ICYgcGFyYW1zICovXG5leHBvcnQgY29uc3QgYnVpbGRRdWVyeSA9IChxdWVyeTogRGJRdWVyeSk6IHtxdWVyeVRleHQ6IHN0cmluZzsgcGFyYW1zPzogdW5rbm93bltdfSA9PiB7XG4gIGNvbnN0IHtwYWdlSW5kZXgsIHJvd3NQZXJQYWdlLCBwYXJhbXN9ID0gcXVlcnk7XG4gIGxldCB7bGltaXQsIG9mZnNldH0gPSBxdWVyeTtcbiAgbGV0IGZpbmFsUXVlcnlUZXh0OiBzdHJpbmc7XG4gIGxldCBwYXJhbUlueCA9IDE7XG4gIGNvbnN0IHBhcmFtc0FyciA9IFtdO1xuXG4gIGlmIChxdWVyeS5xdWVyeVRleHQpIHtcbiAgICBmaW5hbFF1ZXJ5VGV4dCA9IHF1ZXJ5LnF1ZXJ5VGV4dDtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFF1ZXJ5VGV4dCA9IGJ1aWxkTWFpblF1ZXJ5KHF1ZXJ5KSArIGJ1aWxkU29ydEJ5KHF1ZXJ5KTtcbiAgICAvLyBhZGQgbGltaXQvb2Zmc2V0XG4gICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInICYmIHR5cGVvZiByb3dzUGVyUGFnZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGxpbWl0ID0gcm93c1BlclBhZ2U7XG4gICAgICBvZmZzZXQgPSByb3dzUGVyUGFnZSAqIHBhZ2VJbmRleDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsaW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgIGZpbmFsUXVlcnlUZXh0ICs9IGAgTElNSVQgJCR7cGFyYW1Jbnh9YDtcbiAgICAgIHBhcmFtc0Fyci5wdXNoKGxpbWl0KTtcbiAgICAgIHBhcmFtSW54ICs9IDE7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgZmluYWxRdWVyeVRleHQgKz0gYCBPRkZTRVQgJCR7cGFyYW1Jbnh9YDtcbiAgICAgIHBhcmFtc0Fyci5wdXNoKG9mZnNldCk7XG4gICAgICBwYXJhbUlueCArPSAxO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFzc2lnbiBwYXJhbXNcbiAgaWYgKHBhcmFtcykge1xuICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgocGFyYW1OYW1lKSA9PiB7XG4gICAgICBjb25zdCBzcGxpdFF1ZXJ5QXJyID0gZmluYWxRdWVyeVRleHQuc3BsaXQoYDoke3BhcmFtTmFtZX1gKTtcbiAgICAgIGlmIChzcGxpdFF1ZXJ5QXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IG5ld1F1ZXJ5ID0gc3BsaXRRdWVyeUFyclswXTtcbiAgICAgICAgc3BsaXRRdWVyeUFyci5mb3JFYWNoKChwYXJ0LCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIG5ld1F1ZXJ5ICs9IGAkJHtwYXJhbUlueH0ke3BhcnR9YDtcbiAgICAgICAgICAgIHBhcmFtc0Fyci5wdXNoKHBhcmFtc1twYXJhbU5hbWVdKTtcbiAgICAgICAgICAgIHBhcmFtSW54ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZmluYWxRdWVyeVRleHQgPSBuZXdRdWVyeTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcXVlcnlUZXh0OiBmaW5hbFF1ZXJ5VGV4dCxcbiAgICBwYXJhbXM6IHBhcmFtc0FycixcbiAgfTtcbn07XG4iXX0=