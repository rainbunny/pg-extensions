"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildQuery = void 0;

const buildMainQuery = ({
  queryText,
  table,
  whereClause,
  fields
}) => {
  let finalQueryText;
  const fieldsClause = fields ? fields.map(field => `${field} as "${field}"`).join(',') : '';

  if (!queryText) {
    finalQueryText = `SELECT ${fieldsClause || '*'} FROM ${table}`;
    finalQueryText += whereClause ? ` WHERE ${whereClause}` : '';
  } else {
    finalQueryText = `SELECT ${fieldsClause || '*'} FROM (${queryText}) AS T`;
  }

  return finalQueryText;
};

const buildSortBy = ({
  sortBy
}) => sortBy && sortBy.length > 0 ? ` ORDER BY ${sortBy.map(m => m.replace('|', ' ')).join(', ')}` : '';
/** build postgres sql query & params */


const buildQuery = query => {
  const {
    pageIndex,
    rowsPerPage,
    params
  } = query;
  let {
    limit,
    offset
  } = query;
  let finalQueryText;
  let paramInx = 1;
  const paramsArr = [];
  finalQueryText = buildMainQuery(query) + buildSortBy(query); // add limit/offset

  if (typeof pageIndex === 'number' && typeof rowsPerPage === 'number') {
    limit = rowsPerPage;
    offset = rowsPerPage * pageIndex;
  }

  if (typeof limit === 'number') {
    finalQueryText += ` LIMIT $${paramInx}`;
    paramsArr.push(limit);
    paramInx += 1;
  }

  if (typeof offset === 'number') {
    finalQueryText += ` OFFSET $${paramInx}`;
    paramsArr.push(offset);
    paramInx += 1;
  } // assign params


  if (params) {
    Object.keys(params).forEach(paramName => {
      const splitQueryArr = finalQueryText.split(`:${paramName}`);

      if (splitQueryArr.length > 1) {
        let newQuery = splitQueryArr[0];
        splitQueryArr.forEach((part, index) => {
          if (index > 0) {
            newQuery += `$${paramInx}${part}`;
            paramsArr.push(params[paramName]);
            paramInx += 1;
          }
        });
        finalQueryText = newQuery;
      }
    });
  }

  return {
    queryText: finalQueryText,
    params: paramsArr
  };
};

exports.buildQuery = buildQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idWlsZC1xdWVyeS50cyJdLCJuYW1lcyI6WyJidWlsZE1haW5RdWVyeSIsInF1ZXJ5VGV4dCIsInRhYmxlIiwid2hlcmVDbGF1c2UiLCJmaWVsZHMiLCJmaW5hbFF1ZXJ5VGV4dCIsImZpZWxkc0NsYXVzZSIsIm1hcCIsImZpZWxkIiwiam9pbiIsImJ1aWxkU29ydEJ5Iiwic29ydEJ5IiwibGVuZ3RoIiwibSIsInJlcGxhY2UiLCJidWlsZFF1ZXJ5IiwicXVlcnkiLCJwYWdlSW5kZXgiLCJyb3dzUGVyUGFnZSIsInBhcmFtcyIsImxpbWl0Iiwib2Zmc2V0IiwicGFyYW1JbngiLCJwYXJhbXNBcnIiLCJwdXNoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwYXJhbU5hbWUiLCJzcGxpdFF1ZXJ5QXJyIiwic3BsaXQiLCJuZXdRdWVyeSIsInBhcnQiLCJpbmRleCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLE1BQU1BLGNBQWMsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLFNBQUQ7QUFBWUMsRUFBQUEsS0FBWjtBQUFtQkMsRUFBQUEsV0FBbkI7QUFBZ0NDLEVBQUFBO0FBQWhDLENBQUQsS0FBOEQ7QUFDbkYsTUFBSUMsY0FBSjtBQUNBLFFBQU1DLFlBQVksR0FBR0YsTUFBTSxHQUFHQSxNQUFNLENBQUNHLEdBQVAsQ0FBWUMsS0FBRCxJQUFZLEdBQUVBLEtBQU0sUUFBT0EsS0FBTSxHQUE1QyxFQUFnREMsSUFBaEQsQ0FBcUQsR0FBckQsQ0FBSCxHQUErRCxFQUExRjs7QUFDQSxNQUFJLENBQUNSLFNBQUwsRUFBZ0I7QUFDZEksSUFBQUEsY0FBYyxHQUFJLFVBQVNDLFlBQVksSUFBSSxHQUFJLFNBQVFKLEtBQU0sRUFBN0Q7QUFDQUcsSUFBQUEsY0FBYyxJQUFJRixXQUFXLEdBQUksVUFBU0EsV0FBWSxFQUF6QixHQUE2QixFQUExRDtBQUNELEdBSEQsTUFHTztBQUNMRSxJQUFBQSxjQUFjLEdBQUksVUFBU0MsWUFBWSxJQUFJLEdBQUksVUFBU0wsU0FBVSxRQUFsRTtBQUNEOztBQUNELFNBQU9JLGNBQVA7QUFDRCxDQVZEOztBQVlBLE1BQU1LLFdBQVcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBO0FBQUQsQ0FBRCxLQUNsQkEsTUFBTSxJQUFJQSxNQUFNLENBQUNDLE1BQVAsR0FBZ0IsQ0FBMUIsR0FBK0IsYUFBWUQsTUFBTSxDQUFDSixHQUFQLENBQVlNLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxPQUFGLENBQVUsR0FBVixFQUFlLEdBQWYsQ0FBbEIsRUFBdUNMLElBQXZDLENBQTRDLElBQTVDLENBQWtELEVBQTdGLEdBQWlHLEVBRG5HO0FBR0E7OztBQUNPLE1BQU1NLFVBQVUsR0FBSUMsS0FBRCxJQUE2RDtBQUNyRixRQUFNO0FBQUNDLElBQUFBLFNBQUQ7QUFBWUMsSUFBQUEsV0FBWjtBQUF5QkMsSUFBQUE7QUFBekIsTUFBbUNILEtBQXpDO0FBQ0EsTUFBSTtBQUFDSSxJQUFBQSxLQUFEO0FBQVFDLElBQUFBO0FBQVIsTUFBa0JMLEtBQXRCO0FBQ0EsTUFBSVgsY0FBSjtBQUNBLE1BQUlpQixRQUFRLEdBQUcsQ0FBZjtBQUNBLFFBQU1DLFNBQVMsR0FBRyxFQUFsQjtBQUVBbEIsRUFBQUEsY0FBYyxHQUFHTCxjQUFjLENBQUNnQixLQUFELENBQWQsR0FBd0JOLFdBQVcsQ0FBQ00sS0FBRCxDQUFwRCxDQVBxRixDQVNyRjs7QUFDQSxNQUFJLE9BQU9DLFNBQVAsS0FBcUIsUUFBckIsSUFBaUMsT0FBT0MsV0FBUCxLQUF1QixRQUE1RCxFQUFzRTtBQUNwRUUsSUFBQUEsS0FBSyxHQUFHRixXQUFSO0FBQ0FHLElBQUFBLE1BQU0sR0FBR0gsV0FBVyxHQUFHRCxTQUF2QjtBQUNEOztBQUNELE1BQUksT0FBT0csS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QmYsSUFBQUEsY0FBYyxJQUFLLFdBQVVpQixRQUFTLEVBQXRDO0FBQ0FDLElBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlSixLQUFmO0FBQ0FFLElBQUFBLFFBQVEsSUFBSSxDQUFaO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPRCxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCaEIsSUFBQUEsY0FBYyxJQUFLLFlBQVdpQixRQUFTLEVBQXZDO0FBQ0FDLElBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlSCxNQUFmO0FBQ0FDLElBQUFBLFFBQVEsSUFBSSxDQUFaO0FBQ0QsR0F2Qm9GLENBeUJyRjs7O0FBQ0EsTUFBSUgsTUFBSixFQUFZO0FBQ1ZNLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUCxNQUFaLEVBQW9CUSxPQUFwQixDQUE2QkMsU0FBRCxJQUFlO0FBQ3pDLFlBQU1DLGFBQWEsR0FBR3hCLGNBQWMsQ0FBQ3lCLEtBQWYsQ0FBc0IsSUFBR0YsU0FBVSxFQUFuQyxDQUF0Qjs7QUFDQSxVQUFJQyxhQUFhLENBQUNqQixNQUFkLEdBQXVCLENBQTNCLEVBQThCO0FBQzVCLFlBQUltQixRQUFRLEdBQUdGLGFBQWEsQ0FBQyxDQUFELENBQTVCO0FBQ0FBLFFBQUFBLGFBQWEsQ0FBQ0YsT0FBZCxDQUFzQixDQUFDSyxJQUFELEVBQU9DLEtBQVAsS0FBaUI7QUFDckMsY0FBSUEsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiRixZQUFBQSxRQUFRLElBQUssSUFBR1QsUUFBUyxHQUFFVSxJQUFLLEVBQWhDO0FBQ0FULFlBQUFBLFNBQVMsQ0FBQ0MsSUFBVixDQUFlTCxNQUFNLENBQUNTLFNBQUQsQ0FBckI7QUFDQU4sWUFBQUEsUUFBUSxJQUFJLENBQVo7QUFDRDtBQUNGLFNBTkQ7QUFPQWpCLFFBQUFBLGNBQWMsR0FBRzBCLFFBQWpCO0FBQ0Q7QUFDRixLQWJEO0FBY0Q7O0FBRUQsU0FBTztBQUNMOUIsSUFBQUEsU0FBUyxFQUFFSSxjQUROO0FBRUxjLElBQUFBLE1BQU0sRUFBRUk7QUFGSCxHQUFQO0FBSUQsQ0EvQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7RGJRdWVyeX0gZnJvbSAnQGxpYi9pbnRlcmZhY2VzJztcblxuY29uc3QgYnVpbGRNYWluUXVlcnkgPSAoe3F1ZXJ5VGV4dCwgdGFibGUsIHdoZXJlQ2xhdXNlLCBmaWVsZHN9OiBEYlF1ZXJ5KTogc3RyaW5nID0+IHtcbiAgbGV0IGZpbmFsUXVlcnlUZXh0OiBzdHJpbmc7XG4gIGNvbnN0IGZpZWxkc0NsYXVzZSA9IGZpZWxkcyA/IGZpZWxkcy5tYXAoKGZpZWxkKSA9PiBgJHtmaWVsZH0gYXMgXCIke2ZpZWxkfVwiYCkuam9pbignLCcpIDogJyc7XG4gIGlmICghcXVlcnlUZXh0KSB7XG4gICAgZmluYWxRdWVyeVRleHQgPSBgU0VMRUNUICR7ZmllbGRzQ2xhdXNlIHx8ICcqJ30gRlJPTSAke3RhYmxlfWA7XG4gICAgZmluYWxRdWVyeVRleHQgKz0gd2hlcmVDbGF1c2UgPyBgIFdIRVJFICR7d2hlcmVDbGF1c2V9YCA6ICcnO1xuICB9IGVsc2Uge1xuICAgIGZpbmFsUXVlcnlUZXh0ID0gYFNFTEVDVCAke2ZpZWxkc0NsYXVzZSB8fCAnKid9IEZST00gKCR7cXVlcnlUZXh0fSkgQVMgVGA7XG4gIH1cbiAgcmV0dXJuIGZpbmFsUXVlcnlUZXh0O1xufTtcblxuY29uc3QgYnVpbGRTb3J0QnkgPSAoe3NvcnRCeX06IERiUXVlcnkpOiBzdHJpbmcgPT5cbiAgc29ydEJ5ICYmIHNvcnRCeS5sZW5ndGggPiAwID8gYCBPUkRFUiBCWSAke3NvcnRCeS5tYXAoKG0pID0+IG0ucmVwbGFjZSgnfCcsICcgJykpLmpvaW4oJywgJyl9YCA6ICcnO1xuXG4vKiogYnVpbGQgcG9zdGdyZXMgc3FsIHF1ZXJ5ICYgcGFyYW1zICovXG5leHBvcnQgY29uc3QgYnVpbGRRdWVyeSA9IChxdWVyeTogRGJRdWVyeSk6IHtxdWVyeVRleHQ6IHN0cmluZzsgcGFyYW1zPzogdW5rbm93bltdfSA9PiB7XG4gIGNvbnN0IHtwYWdlSW5kZXgsIHJvd3NQZXJQYWdlLCBwYXJhbXN9ID0gcXVlcnk7XG4gIGxldCB7bGltaXQsIG9mZnNldH0gPSBxdWVyeTtcbiAgbGV0IGZpbmFsUXVlcnlUZXh0OiBzdHJpbmc7XG4gIGxldCBwYXJhbUlueCA9IDE7XG4gIGNvbnN0IHBhcmFtc0FyciA9IFtdO1xuXG4gIGZpbmFsUXVlcnlUZXh0ID0gYnVpbGRNYWluUXVlcnkocXVlcnkpICsgYnVpbGRTb3J0QnkocXVlcnkpO1xuXG4gIC8vIGFkZCBsaW1pdC9vZmZzZXRcbiAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInICYmIHR5cGVvZiByb3dzUGVyUGFnZSA9PT0gJ251bWJlcicpIHtcbiAgICBsaW1pdCA9IHJvd3NQZXJQYWdlO1xuICAgIG9mZnNldCA9IHJvd3NQZXJQYWdlICogcGFnZUluZGV4O1xuICB9XG4gIGlmICh0eXBlb2YgbGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgZmluYWxRdWVyeVRleHQgKz0gYCBMSU1JVCAkJHtwYXJhbUlueH1gO1xuICAgIHBhcmFtc0Fyci5wdXNoKGxpbWl0KTtcbiAgICBwYXJhbUlueCArPSAxO1xuICB9XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgIGZpbmFsUXVlcnlUZXh0ICs9IGAgT0ZGU0VUICQke3BhcmFtSW54fWA7XG4gICAgcGFyYW1zQXJyLnB1c2gob2Zmc2V0KTtcbiAgICBwYXJhbUlueCArPSAxO1xuICB9XG5cbiAgLy8gYXNzaWduIHBhcmFtc1xuICBpZiAocGFyYW1zKSB7XG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKChwYXJhbU5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHNwbGl0UXVlcnlBcnIgPSBmaW5hbFF1ZXJ5VGV4dC5zcGxpdChgOiR7cGFyYW1OYW1lfWApO1xuICAgICAgaWYgKHNwbGl0UXVlcnlBcnIubGVuZ3RoID4gMSkge1xuICAgICAgICBsZXQgbmV3UXVlcnkgPSBzcGxpdFF1ZXJ5QXJyWzBdO1xuICAgICAgICBzcGxpdFF1ZXJ5QXJyLmZvckVhY2goKHBhcnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgbmV3UXVlcnkgKz0gYCQke3BhcmFtSW54fSR7cGFydH1gO1xuICAgICAgICAgICAgcGFyYW1zQXJyLnB1c2gocGFyYW1zW3BhcmFtTmFtZV0pO1xuICAgICAgICAgICAgcGFyYW1JbnggKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBmaW5hbFF1ZXJ5VGV4dCA9IG5ld1F1ZXJ5O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBxdWVyeVRleHQ6IGZpbmFsUXVlcnlUZXh0LFxuICAgIHBhcmFtczogcGFyYW1zQXJyLFxuICB9O1xufTtcbiJdfQ==