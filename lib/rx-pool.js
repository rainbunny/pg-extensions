"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RxPool = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _pg = require("pg");

var _implementRxExecutor = require("./implement-rx-executor");

class RxPool extends _pg.Pool {
  constructor(config) {
    super(config);

    if (config) {
      const {
        log
      } = config;
      this.log = log;
    }

    (0, _implementRxExecutor.implementRxExecutor)(this, this.log);
  }
  /** Execute transaction.
   * Follow https://node-postgres.com/features/transactions
   */


  executeTransaction = transaction => (0, _rxjs.from)(this.connect()).pipe((0, _operators.map)(client => (0, _implementRxExecutor.implementRxExecutor)(client, this.log)), (0, _operators.switchMap)(client => (0, _rxjs.of)({}).pipe((0, _operators.switchMap)(() => (0, _rxjs.from)(client.query('BEGIN'))), (0, _operators.switchMap)(() => transaction(client)), (0, _operators.switchMap)(() => (0, _rxjs.from)(client.query('COMMIT').then(() => client.release()))), (0, _operators.catchError)(err => (0, _rxjs.from)(client.query('ROLLBACK').then(() => client.release())).pipe((0, _operators.switchMap)(() => (0, _rxjs.throwError)(err)))))), (0, _operators.map)(() => {// do nothing
  }));
}

exports.RxPool = RxPool;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yeC1wb29sLnRzIl0sIm5hbWVzIjpbIlJ4UG9vbCIsIlBnUG9vbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibG9nIiwiZXhlY3V0ZVRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb24iLCJjb25uZWN0IiwicGlwZSIsImNsaWVudCIsInF1ZXJ5IiwidGhlbiIsInJlbGVhc2UiLCJlcnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFFTyxNQUFNQSxNQUFOLFNBQXFCQyxRQUFyQixDQUFzRDtBQWUzREMsRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQThCO0FBQ3ZDLFVBQU1BLE1BQU47O0FBQ0EsUUFBSUEsTUFBSixFQUFZO0FBQ1YsWUFBTTtBQUFDQyxRQUFBQTtBQUFELFVBQVFELE1BQWQ7QUFDQSxXQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDRDs7QUFDRCxrREFBb0IsSUFBcEIsRUFBMEIsS0FBS0EsR0FBL0I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VDLEVBQUFBLGtCQUFrQixHQUFJQyxXQUFELElBQ25CLGdCQUFLLEtBQUtDLE9BQUwsRUFBTCxFQUFxQkMsSUFBckIsQ0FDRSxvQkFBS0MsTUFBRCxJQUFrQyw4Q0FBMENBLE1BQTFDLEVBQWtELEtBQUtMLEdBQXZELENBQXRDLENBREYsRUFFRSwwQkFBV0ssTUFBRCxJQUNSLGNBQUcsRUFBSCxFQUFPRCxJQUFQLENBQ0UsMEJBQVUsTUFBTSxnQkFBS0MsTUFBTSxDQUFDQyxLQUFQLENBQWEsT0FBYixDQUFMLENBQWhCLENBREYsRUFFRSwwQkFBVSxNQUFNSixXQUFXLENBQUNHLE1BQUQsQ0FBM0IsQ0FGRixFQUdFLDBCQUFVLE1BQU0sZ0JBQUtBLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLFFBQWIsRUFBdUJDLElBQXZCLENBQTRCLE1BQU1GLE1BQU0sQ0FBQ0csT0FBUCxFQUFsQyxDQUFMLENBQWhCLENBSEYsRUFJRSwyQkFBWUMsR0FBRCxJQUNULGdCQUFLSixNQUFNLENBQUNDLEtBQVAsQ0FBYSxVQUFiLEVBQXlCQyxJQUF6QixDQUE4QixNQUFNRixNQUFNLENBQUNHLE9BQVAsRUFBcEMsQ0FBTCxFQUE0REosSUFBNUQsQ0FBaUUsMEJBQVUsTUFBTSxzQkFBV0ssR0FBWCxDQUFoQixDQUFqRSxDQURGLENBSkYsQ0FERixDQUZGLEVBWUUsb0JBQUksTUFBTSxDQUNSO0FBQ0QsR0FGRCxDQVpGLENBRGdCO0FBM0J5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZnJvbSwgdGhyb3dFcnJvciwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtQb29sIGFzIFBnUG9vbH0gZnJvbSAncGcnO1xuaW1wb3J0IHR5cGUge0V4dGVuZGVkUG9vbENvbmZpZywgRGJRdWVyeSwgUnhFeHRlbmRlZFBvb2wsIFJ4RXh0ZW5kZWRQb29sQ2xpZW50fSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtpbXBsZW1lbnRSeEV4ZWN1dG9yfSBmcm9tICcuL2ltcGxlbWVudC1yeC1leGVjdXRvcic7XG5cbmV4cG9ydCBjbGFzcyBSeFBvb2wgZXh0ZW5kcyBQZ1Bvb2wgaW1wbGVtZW50cyBSeEV4dGVuZGVkUG9vbCB7XG4gIGxvZz86IEV4dGVuZGVkUG9vbENvbmZpZ1snbG9nJ107XG5cbiAgZXhlY3V0ZVF1ZXJ5OiA8VD4ocXVlcnk6IERiUXVlcnkpID0+IE9ic2VydmFibGU8VFtdPjtcblxuICBjb3VudDogKHF1ZXJ5OiBEYlF1ZXJ5KSA9PiBPYnNlcnZhYmxlPG51bWJlcj47XG5cbiAgZ2V0QnlJZDogKHRhYmxlOiBzdHJpbmcpID0+IDxSZWNvcmQsIElkPihpZDogSWQsIGZpZWxkcz86IHN0cmluZ1tdLCBpZEZpZWxkPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPFJlY29yZD47XG5cbiAgY3JlYXRlOiAodGFibGU6IHN0cmluZykgPT4gPFJlY29yZCwgSWQ+KHJlY29yZDogUGFydGlhbDxSZWNvcmQ+KSA9PiBPYnNlcnZhYmxlPElkPjtcblxuICB1cGRhdGU6ICh0YWJsZTogc3RyaW5nKSA9PiA8UmVjb3JkLCBJZD4oaWQ6IElkLCB1cGRhdGVkRGF0YTogUGFydGlhbDxSZWNvcmQ+LCBpZEZpZWxkPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHZvaWQ+O1xuXG4gIHJlbW92ZTogKHRhYmxlOiBzdHJpbmcpID0+IDxJZD4oaWQ6IElkLCBpZEZpZWxkPzogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHZvaWQ+O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZz86IEV4dGVuZGVkUG9vbENvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgY29uc3Qge2xvZ30gPSBjb25maWc7XG4gICAgICB0aGlzLmxvZyA9IGxvZztcbiAgICB9XG4gICAgaW1wbGVtZW50UnhFeGVjdXRvcih0aGlzLCB0aGlzLmxvZyk7XG4gIH1cblxuICAvKiogRXhlY3V0ZSB0cmFuc2FjdGlvbi5cbiAgICogRm9sbG93IGh0dHBzOi8vbm9kZS1wb3N0Z3Jlcy5jb20vZmVhdHVyZXMvdHJhbnNhY3Rpb25zXG4gICAqL1xuICBleGVjdXRlVHJhbnNhY3Rpb24gPSAodHJhbnNhY3Rpb246IChjbGllbnQ6IFJ4RXh0ZW5kZWRQb29sQ2xpZW50KSA9PiBPYnNlcnZhYmxlPHZvaWQ+KTogT2JzZXJ2YWJsZTx2b2lkPiA9PlxuICAgIGZyb20odGhpcy5jb25uZWN0KCkpLnBpcGUoXG4gICAgICBtYXAoKGNsaWVudDogUnhFeHRlbmRlZFBvb2xDbGllbnQpID0+IGltcGxlbWVudFJ4RXhlY3V0b3I8UnhFeHRlbmRlZFBvb2xDbGllbnQ+KGNsaWVudCwgdGhpcy5sb2cpKSxcbiAgICAgIHN3aXRjaE1hcCgoY2xpZW50KSA9PlxuICAgICAgICBvZih7fSkucGlwZShcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gZnJvbShjbGllbnQucXVlcnkoJ0JFR0lOJykpKSxcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdHJhbnNhY3Rpb24oY2xpZW50KSksXG4gICAgICAgICAgc3dpdGNoTWFwKCgpID0+IGZyb20oY2xpZW50LnF1ZXJ5KCdDT01NSVQnKS50aGVuKCgpID0+IGNsaWVudC5yZWxlYXNlKCkpKSksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PlxuICAgICAgICAgICAgZnJvbShjbGllbnQucXVlcnkoJ1JPTExCQUNLJykudGhlbigoKSA9PiBjbGllbnQucmVsZWFzZSgpKSkucGlwZShzd2l0Y2hNYXAoKCkgPT4gdGhyb3dFcnJvcihlcnIpKSksXG4gICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICBtYXAoKCkgPT4ge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICB9KSxcbiAgICApO1xufVxuIl19