"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.implementRxExecutor = void 0;

var _rxjs = require("rxjs");

var _executeQuery = require("./execute-query");

var _buildQuery = require("./build-query");

/* eslint-disable no-param-reassign */
const implementRxExecutor = (executor, log) => {
  /** Execute query */
  executor.executeQuery = query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)(query);
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows));
  };
  /** Count records in the query */


  executor.count = query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({ ...query,
      fields: [],
      pageIndex: undefined,
      rowsPerPage: undefined,
      sortBy: undefined,
      limit: undefined,
      offset: undefined
    });
    const countQueryText = `SELECT COUNT(*) FROM (${queryText}) AS T`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, countQueryText, params, log).then(res => res.rows[0].count));
  };
  /** Get record by id */


  executor.getById = table => (id, fields, idField = 'id') => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({
      table,
      whereClause: `${idField} = :id`,
      fields,
      params: {
        id
      }
    });
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params).then(res => res.rows.length > 0 ? res.rows[0] : undefined));
  };
  /** create new record */


  executor.create = table => record => {
    const paramNames = Object.keys(record);
    const params = paramNames.map(name => record[name]);
    const fieldsText = paramNames.join(',');
    const paramsText = Array.from(Array(paramNames.length), (_x, i) => `$${i + 1}`).join(',');
    const queryText = `INSERT INTO ${table}(${fieldsText}) VALUES(${paramsText}) RETURNING id`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows[0].id));
  };
  /** update existing record */


  executor.update = table => (id, updatedData, idField = 'id') => {
    const paramNames = Object.keys(updatedData);
    const params = paramNames.map(name => updatedData[name]);
    const paramsText = paramNames.map((paramName, index) => `${paramName}=$${index + 2}`).join(',');
    const queryText = `UPDATE ${table} SET ${paramsText} WHERE ${idField} = $1`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, [id, ...params], log).then(() => {// do nothing
    }));
  };
  /** delete existing record */


  executor.remove = table => (id, idField = 'id') => {
    const queryText = `DELETE FROM ${table} WHERE ${idField} = $1`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, [id], log).then(() => {// do nothing
    }));
  };

  return executor;
};

exports.implementRxExecutor = implementRxExecutor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbXBsZW1lbnQtcngtZXhlY3V0b3IudHMiXSwibmFtZXMiOlsiaW1wbGVtZW50UnhFeGVjdXRvciIsImV4ZWN1dG9yIiwibG9nIiwiZXhlY3V0ZVF1ZXJ5IiwicXVlcnkiLCJxdWVyeVRleHQiLCJwYXJhbXMiLCJ0aGVuIiwicmVzIiwicm93cyIsImNvdW50IiwiZmllbGRzIiwicGFnZUluZGV4IiwidW5kZWZpbmVkIiwicm93c1BlclBhZ2UiLCJzb3J0QnkiLCJsaW1pdCIsIm9mZnNldCIsImNvdW50UXVlcnlUZXh0IiwiZ2V0QnlJZCIsInRhYmxlIiwiaWQiLCJpZEZpZWxkIiwid2hlcmVDbGF1c2UiLCJsZW5ndGgiLCJjcmVhdGUiLCJyZWNvcmQiLCJwYXJhbU5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsIm5hbWUiLCJmaWVsZHNUZXh0Iiwiam9pbiIsInBhcmFtc1RleHQiLCJBcnJheSIsImZyb20iLCJfeCIsImkiLCJ1cGRhdGUiLCJ1cGRhdGVkRGF0YSIsInBhcmFtTmFtZSIsImluZGV4IiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBTkE7QUFRTyxNQUFNQSxtQkFBbUIsR0FBRyxDQUNqQ0MsUUFEaUMsRUFFakNDLEdBRmlDLEtBR3RCO0FBQ1g7QUFDQUQsRUFBQUEsUUFBUSxDQUFDRSxZQUFULEdBQTRCQyxLQUFKLElBQXdDO0FBQzlELFVBQU07QUFBQ0MsTUFBQUEsU0FBRDtBQUFZQyxNQUFBQTtBQUFaLFFBQXNCLDRCQUFXRixLQUFYLENBQTVCO0FBQ0EsV0FBTyxnQkFBSyxnQ0FBZ0JILFFBQWhCLEVBQTBCSSxTQUExQixFQUFxQ0MsTUFBckMsRUFBNkNKLEdBQTdDLEVBQWtESyxJQUFsRCxDQUF3REMsR0FBRCxJQUFTQSxHQUFHLENBQUNDLElBQXBFLENBQUwsQ0FBUDtBQUNELEdBSEQ7QUFLQTs7O0FBQ0FSLEVBQUFBLFFBQVEsQ0FBQ1MsS0FBVCxHQUFrQk4sS0FBRCxJQUF3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LEdBQUdxQixVQUFVLENBQUNHLEdBQVgsQ0FBZ0JDLElBQUQsSUFBVVMsV0FBVyxDQUFDVCxJQUFELENBQXBDLENBQWY7QUFDQSxVQUFNRyxVQUFVLEdBQUdQLFVBQVUsQ0FBQ0csR0FBWCxDQUFlLENBQUNXLFNBQUQsRUFBWUMsS0FBWixLQUF1QixHQUFFRCxTQUFVLEtBQUlDLEtBQUssR0FBRyxDQUFFLEVBQWhFLEVBQW1FVCxJQUFuRSxDQUF3RSxHQUF4RSxDQUFuQjtBQUNBLFVBQU01QixTQUFTLEdBQUksVUFBU2UsS0FBTSxRQUFPYyxVQUFXLFVBQVNaLE9BQVEsT0FBckU7QUFDQSxXQUFPLGdCQUNMLGdDQUFhckIsUUFBYixFQUF1QkksU0FBdkIsRUFBa0MsQ0FBQ2dCLEVBQUQsRUFBSyxHQUFHZixNQUFSLENBQWxDLEVBQW1ESixHQUFuRCxFQUF3REssSUFBeEQsQ0FBNkQsTUFBTSxDQUNqRTtBQUNELEtBRkQsQ0FESyxDQUFQO0FBS0QsR0FkRDtBQWdCQTs7O0FBQ0FOLEVBQUFBLFFBQVEsQ0FBQzBDLE1BQVQsR0FBbUJ2QixLQUFELElBQW1CLENBQUtDLEVBQUwsRUFBYUMsT0FBTyxHQUFHLElBQXZCLEtBQWtEO0FBQ3JGLFVBQU1qQixTQUFTLEdBQUksZUFBY2UsS0FBTSxVQUFTRSxPQUFRLE9BQXhEO0FBQ0EsV0FBTyxnQkFDTCxnQ0FBYXJCLFFBQWIsRUFBdUJJLFNBQXZCLEVBQWtDLENBQUNnQixFQUFELENBQWxDLEVBQXdDbkIsR0FBeEMsRUFBNkNLLElBQTdDLENBQWtELE1BQU0sQ0FDdEQ7QUFDRCxLQUZELENBREssQ0FBUDtBQUtELEdBUEQ7O0FBU0EsU0FBT04sUUFBUDtBQUNELENBM0VNIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB0eXBlIHtEYlF1ZXJ5LCBSeEV4ZWN1dG9yLCBMb2dnZXIsIFJ4RXh0ZW5kZWRQb29sLCBSeEV4dGVuZGVkUG9vbENsaWVudH0gZnJvbSAnQGxpYi9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHtmcm9tfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZXhlY3V0ZVF1ZXJ5fSBmcm9tICcuL2V4ZWN1dGUtcXVlcnknO1xuaW1wb3J0IHtidWlsZFF1ZXJ5fSBmcm9tICcuL2J1aWxkLXF1ZXJ5JztcblxuZXhwb3J0IGNvbnN0IGltcGxlbWVudFJ4RXhlY3V0b3IgPSA8U291cmNlIGV4dGVuZHMgUnhFeHRlbmRlZFBvb2wgfCBSeEV4dGVuZGVkUG9vbENsaWVudD4oXG4gIGV4ZWN1dG9yOiBTb3VyY2UgJiBSeEV4ZWN1dG9yLFxuICBsb2c/OiBMb2dnZXIsXG4pOiBTb3VyY2UgPT4ge1xuICAvKiogRXhlY3V0ZSBxdWVyeSAqL1xuICBleGVjdXRvci5leGVjdXRlUXVlcnkgPSA8VD4ocXVlcnk6IERiUXVlcnkpOiBPYnNlcnZhYmxlPFRbXT4gPT4ge1xuICAgIGNvbnN0IHtxdWVyeVRleHQsIHBhcmFtc30gPSBidWlsZFF1ZXJ5KHF1ZXJ5KTtcbiAgICByZXR1cm4gZnJvbShleGVjdXRlUXVlcnk8VD4oZXhlY3V0b3IsIHF1ZXJ5VGV4dCwgcGFyYW1zLCBsb2cpLnRoZW4oKHJlcykgPT4gcmVzLnJvd3MpKTtcbiAgfTtcblxuICAvKiogQ291bnQgcmVjb3JkcyBpbiB0aGUgcXVlcnkgKi9cbiAgZXhlY3V0b3IuY291bnQgPSAocXVlcnk6IERiUXVlcnkpOiBPYnNlcnZhYmxlPG51bWJlcj4gPT4ge1xuICAgIGNvbnN0IHtxdWVyeVRleHQsIHBhcmFtc30gPSBidWlsZFF1ZXJ5KHtcbiAgICAgIC4uLnF1ZXJ5LFxuICAgICAgZmllbGRzOiBbXSxcbiAgICAgIHBhZ2VJbmRleDogdW5kZWZpbmVkLFxuICAgICAgcm93c1BlclBhZ2U6IHVuZGVmaW5lZCxcbiAgICAgIHNvcnRCeTogdW5kZWZpbmVkLFxuICAgICAgbGltaXQ6IHVuZGVmaW5lZCxcbiAgICAgIG9mZnNldDogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGNvbnN0IGNvdW50UXVlcnlUZXh0ID0gYFNFTEVDVCBDT1VOVCgqKSBGUk9NICgke3F1ZXJ5VGV4dH0pIEFTIFRgO1xuICAgIHJldHVybiBmcm9tKGV4ZWN1dGVRdWVyeTx7Y291bnQ6IG51bWJlcn0+KGV4ZWN1dG9yLCBjb3VudFF1ZXJ5VGV4dCwgcGFyYW1zLCBsb2cpLnRoZW4oKHJlcykgPT4gcmVzLnJvd3NbMF0uY291bnQpKTtcbiAgfTtcblxuICAvKiogR2V0IHJlY29yZCBieSBpZCAqL1xuICBleGVjdXRvci5nZXRCeUlkID0gKHRhYmxlOiBzdHJpbmcpID0+IDxSZWNvcmQsIElkPihcbiAgICBpZDogSWQsXG4gICAgZmllbGRzPzogc3RyaW5nW10sXG4gICAgaWRGaWVsZCA9ICdpZCcsXG4gICk6IE9ic2VydmFibGU8UmVjb3JkIHwgdW5kZWZpbmVkPiA9PiB7XG4gICAgY29uc3Qge3F1ZXJ5VGV4dCwgcGFyYW1zfSA9IGJ1aWxkUXVlcnkoe3RhYmxlLCB3aGVyZUNsYXVzZTogYCR7aWRGaWVsZH0gPSA6aWRgLCBmaWVsZHMsIHBhcmFtczoge2lkfX0pO1xuICAgIHJldHVybiBmcm9tKFxuICAgICAgZXhlY3V0ZVF1ZXJ5PFJlY29yZD4oZXhlY3V0b3IsIHF1ZXJ5VGV4dCwgcGFyYW1zKS50aGVuKChyZXMpID0+IChyZXMucm93cy5sZW5ndGggPiAwID8gcmVzLnJvd3NbMF0gOiB1bmRlZmluZWQpKSxcbiAgICApO1xuICB9O1xuXG4gIC8qKiBjcmVhdGUgbmV3IHJlY29yZCAqL1xuICBleGVjdXRvci5jcmVhdGUgPSAodGFibGU6IHN0cmluZykgPT4gPFJlY29yZCwgSWQ+KHJlY29yZDogUGFydGlhbDxSZWNvcmQ+KTogT2JzZXJ2YWJsZTxJZD4gPT4ge1xuICAgIGNvbnN0IHBhcmFtTmFtZXMgPSBPYmplY3Qua2V5cyhyZWNvcmQpIGFzIChrZXlvZiBSZWNvcmQpW107XG4gICAgY29uc3QgcGFyYW1zID0gcGFyYW1OYW1lcy5tYXAoKG5hbWUpID0+IHJlY29yZFtuYW1lXSk7XG4gICAgY29uc3QgZmllbGRzVGV4dCA9IHBhcmFtTmFtZXMuam9pbignLCcpO1xuICAgIGNvbnN0IHBhcmFtc1RleHQgPSBBcnJheS5mcm9tKEFycmF5KHBhcmFtTmFtZXMubGVuZ3RoKSwgKF94LCBpKSA9PiBgJCR7aSArIDF9YCkuam9pbignLCcpO1xuICAgIGNvbnN0IHF1ZXJ5VGV4dCA9IGBJTlNFUlQgSU5UTyAke3RhYmxlfSgke2ZpZWxkc1RleHR9KSBWQUxVRVMoJHtwYXJhbXNUZXh0fSkgUkVUVVJOSU5HIGlkYDtcbiAgICByZXR1cm4gZnJvbShleGVjdXRlUXVlcnk8e2lkOiBJZH0+KGV4ZWN1dG9yLCBxdWVyeVRleHQsIHBhcmFtcywgbG9nKS50aGVuKChyZXMpID0+IHJlcy5yb3dzWzBdLmlkKSk7XG4gIH07XG5cbiAgLyoqIHVwZGF0ZSBleGlzdGluZyByZWNvcmQgKi9cbiAgZXhlY3V0b3IudXBkYXRlID0gKHRhYmxlOiBzdHJpbmcpID0+IDxSZWNvcmQsIElkPihcbiAgICBpZDogSWQsXG4gICAgdXBkYXRlZERhdGE6IFBhcnRpYWw8UmVjb3JkPixcbiAgICBpZEZpZWxkID0gJ2lkJyxcbiAgKTogT2JzZXJ2YWJsZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgcGFyYW1OYW1lcyA9IE9iamVjdC5rZXlzKHVwZGF0ZWREYXRhKSBhcyAoa2V5b2YgUmVjb3JkKVtdO1xuICAgIGNvbnN0IHBhcmFtcyA9IHBhcmFtTmFtZXMubWFwKChuYW1lKSA9PiB1cGRhdGVkRGF0YVtuYW1lXSk7XG4gICAgY29uc3QgcGFyYW1zVGV4dCA9IHBhcmFtTmFtZXMubWFwKChwYXJhbU5hbWUsIGluZGV4KSA9PiBgJHtwYXJhbU5hbWV9PSQke2luZGV4ICsgMn1gKS5qb2luKCcsJyk7XG4gICAgY29uc3QgcXVlcnlUZXh0ID0gYFVQREFURSAke3RhYmxlfSBTRVQgJHtwYXJhbXNUZXh0fSBXSEVSRSAke2lkRmllbGR9ID0gJDFgO1xuICAgIHJldHVybiBmcm9tKFxuICAgICAgZXhlY3V0ZVF1ZXJ5KGV4ZWN1dG9yLCBxdWVyeVRleHQsIFtpZCwgLi4ucGFyYW1zXSwgbG9nKS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgfSksXG4gICAgKTtcbiAgfTtcblxuICAvKiogZGVsZXRlIGV4aXN0aW5nIHJlY29yZCAqL1xuICBleGVjdXRvci5yZW1vdmUgPSAodGFibGU6IHN0cmluZykgPT4gPElkPihpZDogSWQsIGlkRmllbGQgPSAnaWQnKTogT2JzZXJ2YWJsZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgcXVlcnlUZXh0ID0gYERFTEVURSBGUk9NICR7dGFibGV9IFdIRVJFICR7aWRGaWVsZH0gPSAkMWA7XG4gICAgcmV0dXJuIGZyb20oXG4gICAgICBleGVjdXRlUXVlcnkoZXhlY3V0b3IsIHF1ZXJ5VGV4dCwgW2lkXSwgbG9nKS50aGVuKCgpID0+IHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgfSksXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gZXhlY3V0b3I7XG59O1xuIl19